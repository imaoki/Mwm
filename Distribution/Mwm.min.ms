/*! Â© 2022 imaoki | MIT License | https://github.com/imaoki */;(local hasMetRequirements;fn hasMetRequirements = (isStruct ::std and isProperty ::std #StructName and classOf ::std.StructName == MAXScriptFunction and ::std.StructName() == #StandardStruct;);if not hasMetRequirements() do (local fileClass = DotNetClass "System.IO.File";local pathClass = DotNetClass "System.IO.Path";local currentDir = pathClass.GetDirectoryName (getSourceFileName());local standardFile = currentDir + @"\Standard.min.ms";if fileClass.Exists standardFile do fileIn standardFile;);if not hasMetRequirements() do (format "[error]Requirement not met.\n";););global mwmDefinitionPool = Dictionary #String;::mwmDefinitionPool[@"Model\MwmBinding.ms"] = struct MwmBindingStruct (public _CP1_ = 1,public _CP2_,public _CP3_,public _CP4_,public _CP5_,private converter,private mode = 1,private source,private sourceName,private target,private targetEventName,private targetPropertyName,public fn GetConverter = (this.converter;),public fn GetMode = (this.mode;),public fn GetSource = (this.source;),public fn GetSourceName = (this.sourceName;),public fn GetSourceValue = (local sourceValue = undefined;if this.isValidProperty this.source do (sourceValue = this.source.GetPropertyValue();if this.isValidConverter this.converter do (sourceValue = this.converter.ToTarget sourceValue;););sourceValue;),public fn GetTarget = (this.target;),public fn GetTargetEnabled = ((this.isValidRolloutControl this.target or this.isValidMenuItem this.target) and this.target.Enabled;),public fn GetTargetEventName = (this.targetEventName;),public fn GetTargetName = (local targetName = undefined;if this.isValidTarget this.target do (if this.isValidRollout this.target or this.isValidRolloutControl this.target then (targetName = this.target.Name as Name;);else (if this.isValidRCMenu this.target or this.isValidMenuItem this.target do (local names = filterString (this.target as String) ":";if names.Count == 2 do (targetName = names[2] as Name;););););targetName;),public fn GetTargetPropertyName = (this.targetPropertyName;),public fn GetTargetPropertyValue = (local targetPropertyValue = undefined;if this.isValidProperty this.source and this.isValidTarget this.target and classOf this.targetPropertyName == Name and isProperty this.target this.targetPropertyName do (targetPropertyValue = getProperty this.target this.targetPropertyName;if this.isValidConverter this.converter do (targetPropertyValue = this.converter.ToSource targetPropertyValue;););targetPropertyValue;),public fn Refresh = (this.updateTargetEnabled();this.updateTargetPropertyValue();ok;),public fn SetConverter obj = (if this.isValidConverter obj or classOf obj == UndefinedClass do (this.converter = obj;this.StateChanged.Notify #Converter this.converter;);this.GetConverter();),public fn SetMode input = (if classOf input == Integer and 1 <= input and input <= 3 do (this.mode = input;this.StateChanged.Notify #Mode this.mode;);this.GetMode();),public fn SetSource obj = (if this.isValidCommand obj or this.isValidProperty obj or classOf obj == UndefinedClass do (this.unsubscribeSource();this.source = obj;this.subscribeSource();this.Refresh();this.StateChanged.Notify #Source this.source;);this.GetSource();),public fn SetSourceName input = (if classOf input == Name do (this.sourceName = input;this.StateChanged.Notify #SourceName this.sourceName;);this.GetSourceName();),public fn SetSourceValue input = (if this.isValidProperty this.source do (this.source.SetPropertyValue input;this.StateChanged.Notify #SourceValueChanged undefined;);ok;),public fn SetTarget obj = (if this.isValidTarget obj do (this.target = obj;this.Refresh();this.StateChanged.Notify #Target this.target;);this.GetTarget();),public fn SetTargetEnabled input = (if classOf input == BooleanClass and (this.isValidRolloutControl this.target or this.isValidMenuItem this.target;) do (this.target.Enabled = input;this.StateChanged.Notify #TargetEnabledChanged this.target.Enabled;);this.GetTargetEnabled();),public fn SetTargetEventName input = (if classOf input == Name do (this.targetEventName = input;this.StateChanged.Notify #TargetEventName this.targetEventName;);this.GetTargetEventName();),public fn SetTargetPropertyName input = (if classOf input == Name do (this.targetPropertyName = input;this.Refresh();this.StateChanged.Notify #TargetPropertyName this.targetPropertyName;);this.GetTargetPropertyName();),public fn SetTargetPropertyValue input = (if this.isValidProperty this.source and this.isValidTarget this.target and classOf this.targetPropertyName == Name and isProperty this.target this.targetPropertyName do (local targetPropertyValue = getProperty this.target this.targetPropertyName;if classOf input == classOf targetPropertyValue do (setProperty this.target this.targetPropertyName input;this.StateChanged.Notify #TargetPropertyValueChanged (getProperty this.target this.targetPropertyName);););this.GetTargetPropertyValue();),public fn SourceChanged type param = (case type of ((#CanExecuteChanged): this.updateTargetEnabled();(#EnabledChanged): this.updateTargetEnabled();(#PropertyValue): (if #{1, 2}[this.mode] do (this.updateTargetPropertyValue();););default: (););ok;),public fn TargetChanged type param = (case type of ((#TargetChanged): (if this.isValidEvent param and param.GetControl() == this.target and param.GetEventName() == this.targetEventName do (if this.isValidCommand this.source then (this.source.Execute param;);else (if this.isValidProperty this.source and #{1, 3}[this.mode] do (this.SetSourceValue (this.GetTargetPropertyValue());););););default: (););ok;),private fn isValidCommand obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmCommandStruct;),private fn isValidConverter obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmConverterStruct;),private fn isValidEvent obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmEventStruct;),private fn isValidMenuItem obj = (classOf obj == Value and matchPattern (obj as String) pattern:"MenuItem:*" ignoreCase:true;),private fn isValidProperty obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmPropertyStruct;),private fn isValidRCMenu obj = ((classOf obj as String) as Name == #RCMenu and matchPattern (obj as String) pattern:"RCMenu:*" ignoreCase:true;),private fn isValidRollout obj = (classOf obj == RolloutClass;),private fn isValidRolloutControl obj = (superClassOf obj == RolloutControl;),private fn isValidTarget obj = (this.isValidRollout obj or this.isValidRolloutControl obj or this.isValidRCMenu obj or this.isValidMenuItem obj;),private fn subscribeSource = (if this.isValidCommand this.source then (this.source.CanExecuteChanged.Subscribe this.SourceChanged;this.source.StateChanged.Subscribe this.SourceChanged;);else (if this.isValidProperty this.source do (this.source.EnabledChanged.Subscribe this.SourceChanged;this.source.StateChanged.Subscribe this.SourceChanged;););ok;),private fn unsubscribeSource = (if this.isValidCommand this.source then (this.source.CanExecuteChanged.Unsubscribe this.SourceChanged;this.source.StateChanged.Unsubscribe this.SourceChanged;);else (if this.isValidProperty this.source do (this.source.EnabledChanged.Unsubscribe this.SourceChanged;this.source.StateChanged.Unsubscribe this.SourceChanged;););ok;),private fn updateTargetEnabled = (local isEnabled = true;if this.isValidCommand this.source then (isEnabled = this.source.CanExecute(););else (if this.isValidProperty this.source do (isEnabled = this.source.IsEnabled();););this.SetTargetEnabled isEnabled;ok;),private fn updateTargetPropertyValue = (this.SetTargetPropertyValue (this.GetSourceValue());ok;),public fn StructName = #MwmBindingStruct,public fn Dump indent:"" out:listener = (format "%MwmBindingStruct\n" indent to:out;if this.isValidConverter this.converter then (format "%  converter:\n" indent to:out;this.converter.Dump indent:(indent + "    ") out:out;);else (format "%  converter:%\n" indent this.converter to:out;);format "%  mode:%\n" indent this.mode to:out;if this.isValidCommand this.source or this.isValidProperty this.source then (format "%  source:\n" indent to:out;this.source.Dump indent:(indent + "    ") out:out;);else (format "%  source:%\n" indent this.source to:out;);format "%  sourceName:%\n" indent this.sourceName to:out;format "%  target:%\n" indent this.target to:out;format "%  targetEventName:%\n" indent this.targetEventName to:out;format "%  targetPropertyName:%\n" indent this.targetPropertyName to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true and isProperty obj #GetConverter and classOf obj.GetConverter == MAXScriptFunction and isProperty obj #GetMode and classOf obj.GetMode == MAXScriptFunction and obj.GetMode() == this.GetMode() and isProperty obj #GetSource and classOf obj.GetSource == MAXScriptFunction and isProperty obj #GetSourceName and classOf obj.GetSourceName == MAXScriptFunction and obj.GetSourceName() == this.GetSourceName() and isProperty obj #GetTarget and classOf obj.GetTarget == MAXScriptFunction and obj.GetTarget() == this.GetTarget() and isProperty obj #GetTargetEventName and classOf obj.GetTargetEventName == MAXScriptFunction and obj.GetTargetEventName() == this.GetTargetEventName() and isProperty obj #GetTargetPropertyName and classOf obj.GetTargetPropertyName == MAXScriptFunction and obj.GetTargetPropertyName() == this.GetTargetPropertyName();if isEqualProperties do (local ov = obj.GetConverter();local tv = this.GetConverter();if this.isValidConverter tv then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););if isEqualProperties do (local ov = obj.GetSource();local tv = this.GetSource();if this.isValidCommand tv or this.isValidProperty tv then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetMode this._CP1_;this.SetSourceName this._CP2_;this.SetTarget this._CP3_;this.SetTargetEventName this._CP4_;this.SetTargetPropertyName this._CP5_;););::mwmDefinitionPool[@"Model\MwmCommand.ms"] = struct MwmCommandStruct (public _CP1_,public _CP2_,public _CP3_,public _CP4_,public _CP5_,private canExecuteCondition,private commandName,private executeCondition,private executeFunction,private model,private modelAttribute,public fn CanExecute = (local result = true;if this.isValidCondition this.canExecuteCondition do (result = this.canExecuteCondition.Evaluate();if classOf result != BooleanClass do (result = true;););result;),public fn Execute event = (if this.CanExecute() do (local params = #();if this.isValidCondition this.executeCondition do (params = this.executeCondition.MakeParams(););if this.isValidFunction this.executeFunction do (this.executeFunction this.model params event;););ok;),public fn GetCanExecuteCondition = (this.canExecuteCondition;),public fn GetCommandName = (this.commandName;),public fn GetExecuteCondition = (this.executeCondition;),public fn GetExecuteFunction = (this.executeFunction;),public fn GetModel = (this.model;),public fn GetModelAttribute = (this.modelAttribute;),public fn RaiseCanExecuteChanged type param = (case type of ((#ConditionChanged): (this.CanExecuteChanged.Notify #CanExecuteChanged (this.CanExecute()););default: (););ok;),public fn SetCanExecuteCondition condition = (if this.isValidCondition condition do (this.unsubscribeCanExecuteCondition();this.canExecuteCondition = condition;this.subscribeCanExecuteCondition();this.StateChanged.Notify #CanExecuteCondition this.canExecuteCondition;);this.GetCanExecuteCondition();),public fn SetCommandName input = (if classOf input == Name do (this.commandName = input;this.StateChanged.Notify #CommandName this.commandName;);this.GetCommandName();),public fn SetExecuteCondition condition = (if this.isValidCondition condition do (this.executeCondition = condition;this.StateChanged.Notify #ExecuteCondition this.executeCondition;);this.GetExecuteCondition();),public fn SetExecuteFunction input = (if this.isValidFunction input do (this.executeFunction = input;this.StateChanged.Notify #ExecuteFunction this.executeFunction;);this.GetExecuteFunction();),public fn SetModel obj = (if this.isValidModel obj or classOf obj == UndefinedClass do (this.model = obj;this.StateChanged.Notify #Model this.model;);this.GetModel();),public fn SetModelAttribute obj = (if this.isValidModelAttribute obj or classOf obj == UndefinedClass do (this.modelAttribute = obj;this.StateChanged.Notify #ModelAttribute this.modelAttribute;);this.GetModelAttribute();),private fn isValidCondition obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmConditionStruct;),private fn isValidFunction obj = (classOf obj == MAXScriptFunction;),private fn isValidModel obj = (isStruct obj;),private fn isValidModelAttribute obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmModelAttributeStruct;),private fn isValidObservable obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #ObservableStruct;),private fn isValidProperty obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmPropertyStruct;),private fn subscribeCanExecuteCondition = (if this.isValidCondition this.canExecuteCondition and this.isValidObservable this.canExecuteCondition.StateChanged do (this.canExecuteCondition.StateChanged.Subscribe this.RaiseCanExecuteChanged;);ok;),private fn unsubscribeCanExecuteCondition = (if this.isValidCondition this.canExecuteCondition and this.isValidObservable this.canExecuteCondition.StateChanged do (this.canExecuteCondition.StateChanged.Unsubscribe this.RaiseCanExecuteChanged;);ok;),public fn StructName = #MwmCommandStruct,public fn Dump indent:"" out:listener = (format "%MwmCommandStruct\n" indent to:out;if this.isValidCondition this.canExecuteCondition then (format "%  canExecuteCondition:\n" indent to:out;this.canExecuteCondition.Dump indent:(indent + "    ") out:out;);else (format "%  canExecuteCondition:%\n" indent this.canExecuteCondition to:out;);format "%  commandName:%\n" indent this.commandName to:out;if this.isValidCondition this.executeCondition then (format "%  executeCondition:\n" indent to:out;this.executeCondition.Dump indent:(indent + "    ") out:out;);else (format "%  executeCondition:%\n" indent this.executeCondition to:out;);format "%  executeFunction:%\n" indent this.executeFunction to:out;if this.isValidModel this.model and isProperty this.model #StructName and classOf this.model.StructName == MAXScriptFunction and isProperty this.model #Dump and classOf this.model.Dump == MAXScriptFunction then (format "%  model:\n" indent to:out;this.model.Dump indent:(indent + "    ") out:out;);else (format "%  model:%\n" indent this.model to:out;);if this.isValidModelAttribute this.modelAttribute then (format "%  modelAttribute:\n" indent to:out;this.modelAttribute.Dump indent:(indent + "    ") out:out;);else (format "%  modelAttribute:%\n" indent this.modelAttribute to:out;);ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true and isProperty obj #GetCanExecuteCondition and classOf obj.GetCanExecuteCondition == MAXScriptFunction and isProperty obj #GetCommandName and classOf obj.GetCommandName == MAXScriptFunction and obj.GetCommandName() == this.GetCommandName() and isProperty obj #GetExecuteCondition and classOf obj.GetExecuteCondition == MAXScriptFunction and isProperty obj #GetExecuteFunction and classOf obj.GetExecuteFunction == MAXScriptFunction and obj.GetExecuteFunction() == this.GetExecuteFunction() and isProperty obj #GetModel and classOf obj.GetModel == MAXScriptFunction and isProperty obj #GetModelAttribute and classOf obj.GetModelAttribute == MAXScriptFunction;if isEqualProperties do (local ov = obj.GetCanExecuteCondition();local tv = this.GetCanExecuteCondition();if this.isValidCondition tv then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););if isEqualProperties do (local ov = obj.GetExecuteCondition();local tv = this.GetExecuteCondition();if this.isValidCondition tv then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););if isEqualProperties do (local ov = obj.GetModel();local tv = this.GetModel();if this.isValidModel tv and isProperty tv #Equals and classOf tv.Equals == MAXScriptFunction then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););if isEqualProperties do (local ov = obj.GetModelAttribute();local tv = this.GetModelAttribute();if this.isValidModelAttribute tv then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););isEqualStructName and isEqualProperties;),public CanExecuteChanged,public StateChanged,on Create do (this.CanExecuteChanged = ::std.ObservableStruct();this.StateChanged = ::std.ObservableStruct();this.SetCommandName this._CP1_;this.SetExecuteFunction this._CP2_;this.SetModelAttribute this._CP3_;this.SetExecuteCondition this._CP4_;this.SetCanExecuteCondition this._CP5_;););::mwmDefinitionPool[@"Model\MwmCondition.ms"] = struct MwmConditionStruct (public _CP1_,private evaluator,private properties = #(),public fn AddProperty property = (if this.isValidProperty property and not this.HasProperty property do (append this.properties property;property.StateChanged.Subscribe this.PropertyValueChanged;this.StateChanged.Notify #Properties this.properties;);this.HasProperty property;),public fn Evaluate = (local result = undefined;if this.isValidFunction this.evaluator do (result = this.evaluator (this.MakeParams()););result;),public fn GetEvaluator = (this.evaluator;),public fn GetProperties = (this.properties;),public fn GetProperty propertyName = (local property = undefined;local index = this.findPropertyByName propertyName;if 1 <= index and index <= this.properties.Count do (property = this.properties[index];);property;),public fn GetPropertyNames = (for property in this.properties where this.isValidProperty property collect (property.GetPropertyName(););),public fn HasProperty key = (local propertyName = key;if this.isValidProperty key do (propertyName = key.GetPropertyName(););this.findPropertyByName propertyName > 0;),public fn MakeParams = (for property in this.properties where this.isValidProperty property collect (local propertyName = property.GetPropertyName();local propertyValue = property.GetPropertyValue();DataPair Name:propertyName Value:propertyValue;);),public fn PropertyValueChanged type param = (case type of ((#PropertyValue): this.StateChanged.Notify #ConditionChanged param;default: (););ok;),public fn RemoveProperty key = (local propertyName = key;if this.isValidProperty key do (propertyName = key.GetPropertyName(););local index = this.findPropertyByName propertyName;if 1 <= index and index <= this.properties.Count do (local property = this.properties[index];if this.isValidProperty property do (property.StateChanged.Unsubscribe this.PropertyValueChanged;);deleteItem this.properties index;this.StateChanged.Notify #Properties this.properties;);not this.HasProperty key;),public fn SetEvaluator input = (if this.isValidFunction input or classOf input == UndefinedClass do (this.evaluator = input;this.StateChanged.Notify #Evaluator this.evaluator;);this.GetEvaluator();),private fn findProperty property = (local index = 0;if this.isValidProperty property do (index = this.findPropertyByName (property.GetPropertyName()););index;),private fn findPropertyByName propertyName = (local index = 0;if classOf propertyName == Name do (for i = 1 to this.properties.Count while index == 0 do (if this.isValidProperty this.properties[i] and this.properties[i].GetPropertyName() == propertyName do (index = i;);););index;),private fn isValidFunction obj = (classOf obj == MAXScriptFunction;),private fn isValidProperty obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmPropertyStruct;),public fn StructName = #MwmConditionStruct,public fn Dump indent:"" out:listener = (format "%MwmConditionStruct\n" indent to:out;format "%  evaluator:%\n" indent this.evaluator to:out;format "%  properties:%\n" indent this.properties.Count to:out;for i = 1 to this.properties.Count do (local property = this.properties[i];if this.isValidProperty property then (format "%    [%]:\n" indent i to:out;property.Dump indent:(indent + "      ") out:out;);else (format "%    [%]:%\n" indent i property to:out;););ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true and isProperty obj #GetEvaluator and classOf obj.GetEvaluator == MAXScriptFunction and obj.GetEvaluator() == this.GetEvaluator() and isProperty obj #GetProperties and classOf obj.GetProperties == MAXScriptFunction;if isEqualProperties do (local ov = obj.GetProperties();local tv = this.GetProperties();isEqualProperties = classOf ov == Array and classOf tv == Array;if isEqualProperties do (isEqualProperties = ov.Count == tv.Count;);if isEqualProperties do (for i = 1 to tv.Count while isEqualProperties do (if this.isValidProperty tv[i] then (isEqualProperties = tv[i].Equals ov[i];);else (isEqualProperties = ov[i] == tv[i];););););isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetEvaluator this._CP1_;););::mwmDefinitionPool[@"Model\MwmConverter.ms"] = struct MwmConverterStruct (public _CP1_,public _CP2_,private toSourceFunction,private toTargetFunction,public fn GetToSourceFunction = (this.toSourceFunction;),public fn GetToTargetFunction = (this.toTargetFunction;),public fn SetToSourceFunction input = (if this.isValidFunction input do (this.toSourceFunction = input;);this.GetToSourceFunction();),public fn SetToTargetFunction input = (if this.isValidFunction input do (this.toTargetFunction = input;);this.GetToTargetFunction();),public fn ToSource input = (if this.isValidFunction this.toSourceFunction then (this.toSourceFunction input;);else (input;);),public fn ToTarget input = (if this.isValidFunction this.toTargetFunction then (this.toTargetFunction input;);else (input;);),private fn isValidFunction obj = (classOf obj == MAXScriptFunction;),public fn StructName = #MwmConverterStruct,public fn Dump indent:"" out:listener = (format "%MwmConverterStruct\n" indent to:out;format "%  toSourceFunction:%\n" indent this.toSourceFunction to:out;format "%  toTargetFunction:%\n" indent this.toTargetFunction to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true and isProperty obj #GetToSourceFunction and classOf obj.GetToSourceFunction == MAXScriptFunction and obj.GetToSourceFunction() == this.GetToSourceFunction() and isProperty obj #GetToTargetFunction and classOf obj.GetToTargetFunction == MAXScriptFunction and obj.GetToTargetFunction() == this.GetToTargetFunction();isEqualStructName and isEqualProperties;),on Create do (this.SetToTargetFunction this._CP1_;this.SetToSourceFunction this._CP2_;););::mwmDefinitionPool[@"Model\MwmEvent.ms"] = struct MwmEventStruct (public _CP1_,public _CP2_,public _CP3_ = #(),private control,private eventName,private params = #(),public fn GetControl = (this.control;),public fn GetEventName = (this.eventName;),public fn GetParams = (this.params;),public fn SetControl input = (if this.isValidControl input do (this.control = input;);this.GetControl();),public fn SetEventName input = (if classOf input == Name do (this.eventName = input;);this.GetEventName();),public fn SetParams input = (if classOf input == Array then (this.params = input;);else (this.params = #(input););this.GetParams();),private fn isValidControl obj = (this.isValidRollout obj or this.isValidRolloutControl obj or this.isValidRCMenu obj or this.isValidMenuItem obj;),private fn isValidMenuItem obj = (classOf obj == Value and matchPattern (obj as String) pattern:"MenuItem:*" ignoreCase:true;),private fn isValidRCMenu obj = ((classOf obj as String) as Name == #RCMenu and matchPattern (obj as String) pattern:"RCMenu:*" ignoreCase:true;),private fn isValidRollout obj = (classOf obj == RolloutClass;),private fn isValidRolloutControl obj = (superClassOf obj == RolloutControl;),public fn StructName = #MwmEventStruct,public fn Dump indent:"" out:listener = (format "%MwmEventStruct\n" indent to:out;format "%  control:%\n" indent this.control to:out;format "%  eventName:%\n" indent this.eventName to:out;format "%  params:%\n" indent this.params.Count to:out;for i = 1 to this.params.Count do (local param = this.params[i];if classOf param == String then (format "%    [%]:\"%\"\n" indent i param to:out;);else (format "%    [%]:%\n" indent i param to:out;););ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetEventName and classOf obj.GetEventName == MAXScriptFunction and obj.GetEventName() == this.GetEventName() and isProperty obj #GetParams and classOf obj.GetParams == MAXScriptFunction;if isEqualProperties do (local ov = obj.GetParams();local tv = this.GetParams();isEqualProperties = classOf ov == Array and classOf tv == Array;if isEqualProperties do (local ovCount = ov.Count;local tvCount = tv.Count;isEqualProperties = ovCount == tvCount;if isEqualProperties do (for i = 1 to tvCount while isEqualProperties do (local ovValue = ov[i];local tvValue = tv[i];if isStruct tvValue and isProperty tvValue #Equals and classOf tvValue.Equals == MAXScriptFunction then (isEqualProperties = tvValue.Equals ovValue;);else (isEqualProperties = ovValue == tvValue;);););););isEqualStructName and isEqualProperties;),on Create do (this.SetControl this._CP1_;this.SetEventName this._CP2_;this.SetParams this._CP3_;););::mwmDefinitionPool[@"Model\MwmModelAttribute.ms"] = struct MwmModelAttributeStruct (public _CP1_,public _CP2_,public _CP3_,public _CP4_,private getterName,private modelName,private observableName = #StateChanged,private propertyName,private setterName,public fn GetGetterName = (this.getterName;),public fn GetModelName = (this.modelName;),public fn GetObservableName = (this.observableName;),public fn GetPropertyName = (this.propertyName;),public fn GetSetterName = (this.setterName;),public fn SetGetterName input = (if classOf input == Name or classOf input == UndefinedClass do (this.getterName = input;this.StateChanged.Notify #GetterName this.getterName;);this.GetGetterName();),public fn SetModelName input = (if classOf input == Name or classOf input == UndefinedClass do (this.modelName = input;this.StateChanged.Notify #ModelName this.modelName;);this.GetModelName();),public fn SetObservableName input = (if classOf input == Name do (this.observableName = input;this.StateChanged.Notify #ObservableName this.observableName;);this.GetObservableName();),public fn SetPropertyName input = (if classOf input == Name or classOf input == UndefinedClass do (this.propertyName = input;this.StateChanged.Notify #PropertyName this.propertyName;);this.GetPropertyName();),public fn SetSetterName input = (if classOf input == Name or classOf input == UndefinedClass do (this.setterName = input;this.StateChanged.Notify #SetterName this.setterName;);this.GetSetterName();),public fn StructName = #MwmModelAttributeStruct,public fn Dump indent:"" out:listener = (format "%MwmModelAttributeStruct\n" indent to:out;format "%  getterName:%\n" indent this.getterName to:out;format "%  modelName:%\n" indent this.modelName to:out;format "%  observableName:%\n" indent this.observableName to:out;format "%  propertyName:%\n" indent this.propertyName to:out;format "%  setterName:%\n" indent this.setterName to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true and isProperty obj #GetGetterName and classOf obj.GetGetterName == MAXScriptFunction and obj.GetGetterName() == this.GetGetterName() and isProperty obj #GetModelName and classOf obj.GetModelName == MAXScriptFunction and obj.GetModelName() == this.GetModelName() and isProperty obj #GetObservableName and classOf obj.GetObservableName == MAXScriptFunction and obj.GetObservableName() == this.GetObservableName() and isProperty obj #GetPropertyName and classOf obj.GetPropertyName == MAXScriptFunction and obj.GetPropertyName() == this.GetPropertyName() and isProperty obj #GetSetterName and classOf obj.GetSetterName == MAXScriptFunction and obj.GetSetterName() == this.GetSetterName();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetModelName this._CP1_;this.SetPropertyName this._CP2_;this.SetGetterName this._CP3_;this.SetSetterName this._CP4_;););::mwmDefinitionPool[@"Model\MwmProperty.ms"] = struct MwmPropertyStruct (public _CP1_,public _CP2_,public _CP3_,public _CP4_,private enabledCondition,private model,private modelAttribute,private propertyName,private propertyValue,public fn GetEnabledCondition = (this.enabledCondition;),public fn GetModel = (this.model;),public fn GetModelAttribute = (this.modelAttribute;),public fn GetPropertyName = (this.propertyName;),public fn GetPropertyValue = (this.propertyValue;),public fn IsEnabled = (local result = true;if this.isValidCondition this.enabledCondition do (result = this.enabledCondition.Evaluate();if classOf result != BooleanClass do (result = true;););result;),public fn Load config viewModelName = (local isSuccessful = false;if this.isValidConfig config and classOf viewModelName == Name and not this.isValidModelAttribute this.modelAttribute and classOf this.propertyName == Name do (local key = this.generateConfigKey viewModelName;this.SetPropertyValue (config.GetValue key);isSuccessful = true;);isSuccessful;),public fn RaiseEnabledChanged type param = (case type of ((#ConditionChanged): (this.EnabledChanged.Notify #EnabledChanged (this.IsEnabled()););default: (););ok;),public fn Save config viewModelName = (local isSuccessful = false;if this.isValidConfig config and classOf viewModelName == Name and not this.isValidModelAttribute this.modelAttribute and classOf this.propertyName == Name do (local key = this.generateConfigKey viewModelName;config.AddValue key this.propertyValue;isSuccessful = true;);isSuccessful;),public fn SetEnabledCondition condition = (if this.isValidCondition condition do (this.unsubscribeEnabledCondition();this.enabledCondition = condition;this.subscribeEnabledCondition();this.StateChanged.Notify #EnabledCondition this.enabledCondition;);this.GetEnabledCondition();),public fn SetModel obj = (if this.isValidModel obj or classOf obj == UndefinedClass do (this.unsubscribeModel();this.model = obj;this.subscribeModel();this.synchronizePropertyValue (this.getGetterMethod());this.StateChanged.Notify #Model this.model;);this.GetModel();),public fn SetModelAttribute obj = (if this.isValidModelAttribute obj or classOf obj == UndefinedClass do (this.unsubscribeModel();this.modelAttribute = obj;this.subscribeModel();this.synchronizePropertyValue (this.getGetterMethod());this.StateChanged.Notify #ModelAttribute this.modelAttribute;);this.GetModelAttribute();),public fn SetPropertyName input = (if classOf input == Name do (this.propertyName = input;this.StateChanged.Notify #PropertyName this.propertyName;);this.GetPropertyName();),public fn SetPropertyValue input = (local setterMethod = this.getSetterMethod();if classOf setterMethod == MAXScriptFunction then (setterMethod input;);else (this.propertyValue = input;this.StateChanged.Notify #PropertyValue this.propertyValue;);ok;),public fn SynchronizeWithModel type param = (local getterMethod = undefined;if this.isValidModelAttribute this.modelAttribute and type == this.modelAttribute.GetPropertyName() do (getterMethod = this.getGetterMethod(););this.synchronizePropertyValue getterMethod;ok;),private fn generateConfigKey viewModelName = ((viewModelName as String + "." + this.propertyName as String) as Name;),private fn getGetterMethod = (local getterMethod = undefined;if this.isValidModel this.model and this.isValidModelAttribute this.modelAttribute do (local getterName = this.modelAttribute.GetGetterName();if classOf getterName == Name do (getterMethod = getProperty this.model getterName;););getterMethod;),private fn getModelObservable = (local modelObservable = undefined;if this.isValidModel this.model and this.isValidModelAttribute this.modelAttribute do (local observableName = this.modelAttribute.GetObservableName();if classOf observableName == Name and isProperty this.model observableName do (modelObservable = getProperty this.model observableName;););modelObservable;),private fn getSetterMethod = (local setterMethod = undefined;if this.isValidModel this.model and this.isValidModelAttribute this.modelAttribute do (local setterName = this.modelAttribute.GetSetterName();if classOf setterName == Name do (setterMethod = getProperty this.model setterName;););setterMethod;),private fn isValidCondition obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmConditionStruct;),private fn isValidConfig obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #ConfigStruct;),private fn isValidModel obj = (isStruct obj;),private fn isValidModelAttribute obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmModelAttributeStruct;),private fn isValidObservable obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #ObservableStruct;),private fn subscribeEnabledCondition = (if this.isValidCondition this.enabledCondition and this.isValidObservable this.enabledCondition.StateChanged do (this.enabledCondition.StateChanged.Subscribe this.RaiseEnabledChanged;);ok;),private fn subscribeModel = (local modelObservable = this.getModelObservable();if this.isValidObservable modelObservable do (modelObservable.Subscribe this.SynchronizeWithModel;);ok;),private fn synchronizePropertyValue getterMethod = (if classOf getterMethod == MAXScriptFunction do (this.propertyValue = getterMethod();this.StateChanged.Notify #PropertyValue this.propertyValue;);ok;),private fn unsubscribeEnabledCondition = (if this.isValidCondition this.enabledCondition and this.isValidObservable this.enabledCondition.StateChanged do (this.enabledCondition.StateChanged.Unsubscribe this.RaiseEnabledChanged;);ok;),private fn unsubscribeModel = (local modelObservable = this.getModelObservable();if this.isValidObservable modelObservable do (modelObservable.Unsubscribe this.SynchronizeWithModel;);ok;),public fn StructName = #MwmPropertyStruct,public fn Dump indent:"" out:listener = (format "%MwmPropertyStruct\n" indent to:out;if this.isValidCondition this.enabledCondition then (format "%  enabledCondition:\n" indent to:out;this.enabledCondition.Dump indent:(indent + "    ") out:out;);else (format "%  enabledCondition:%\n" indent this.enabledCondition to:out;);if this.isValidModel this.model and isProperty this.model #StructName and classOf this.model.StructName == MAXScriptFunction and isProperty this.model #Dump and classOf this.model.Dump == MAXScriptFunction then (format "%  model:\n" indent to:out;this.model.Dump indent:(indent + "    ") out:out;);else (format "%  model:%\n" indent this.model to:out;);if this.isValidModelAttribute this.modelAttribute then (format "%  modelAttribute:\n" indent to:out;this.modelAttribute.Dump indent:(indent + "    ") out:out;);else (format "%  modelAttribute:%\n" indent this.modelAttribute to:out;);format "%  propertyName:%\n" indent this.propertyName to:out;if isStruct this.propertyValue and isProperty this.propertyValue #StructName and classOf this.propertyValue.StructName == MAXScriptFunction and isProperty this.propertyValue #Dump and classOf this.propertyValue.Dump == MAXScriptFunction then (format "%  propertyValue:\n" indent to:out;this.propertyValue.Dump indent:(indent + "    ") out:out;);else (if classOf this.propertyValue == String then (format "%  propertyValue:\"%\"\n" indent this.propertyValue to:out;);else (format "%  propertyValue:%\n" indent this.propertyValue to:out;););ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true and isProperty obj #GetEnabledCondition and classOf obj.GetEnabledCondition == MAXScriptFunction and isProperty obj #GetModel and classOf obj.GetModel == MAXScriptFunction and isProperty obj #GetModelAttribute and classOf obj.GetModelAttribute == MAXScriptFunction and isProperty obj #GetPropertyName and classOf obj.GetPropertyName == MAXScriptFunction and obj.GetPropertyName() == this.GetPropertyName() and isProperty obj #GetPropertyValue and classOf obj.GetPropertyValue == MAXScriptFunction;if isEqualProperties do (local ov = obj.GetEnabledCondition();local tv = this.GetEnabledCondition();if this.isValidCondition tv then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););if isEqualProperties do (local ov = obj.GetModel();local tv = this.GetModel();if this.isValidModel tv and isProperty tv #Equals and classOf tv.Equals == MAXScriptFunction then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););if isEqualProperties do (local ov = obj.GetModelAttribute();local tv = this.GetModelAttribute();if this.isValidModelAttribute tv then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););if isEqualProperties do (local ov = obj.GetPropertyValue();local tv = this.GetPropertyValue();if isStruct tv and isProperty tv #Equals and classOf tv.Equals == MAXScriptFunction then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););isEqualStructName and isEqualProperties;),public EnabledChanged,public StateChanged,on Create do (this.EnabledChanged = ::std.ObservableStruct();this.StateChanged = ::std.ObservableStruct();this.SetPropertyName this._CP1_;this.SetPropertyValue this._CP2_;this.SetModelAttribute this._CP3_;this.SetEnabledCondition this._CP4_;););::mwmDefinitionPool[@"Model\MwmViewModel.ms"] = struct MwmViewModelStruct (public _CP1_,private bindingTable,private commandTable,private modelTable,private propertyTable,private viewModelName,public fn AddCommand command = (if this.isValidCommand command do (local commandName = command.GetCommandName();if classOf commandName == Name do (this.commandTable[commandName] = command;this.setModelTo command;for sourceName in this.bindingTable.Keys do (for targetName in this.bindingTable[sourceName].Keys do (this.setCommandTo this.bindingTable[sourceName][targetName];););this.StateChanged.Notify #CommandTable this.commandTable;););this.HasCommand command;),public fn AddModel modelName obj = (if classOf modelName == Name and this.isValidModel obj do (this.modelTable[modelName] = obj;for commandName in this.commandTable.Keys do (this.setModelTo this.commandTable[commandName];);for propertyName in this.propertyTable.Keys do (this.setModelTo this.propertyTable[propertyName];);this.StateChanged.Notify #ModelTable this.modelTable;);this.HasModel obj;),public fn AddProperty property = (if this.isValidProperty property do (local propertyName = property.GetPropertyName();if classOf propertyName == Name do (this.propertyTable[propertyName] = property;this.setModelTo property;for sourceName in this.bindingTable.Keys do (for targetName in this.bindingTable[sourceName].Keys do (this.setPropertyTo this.bindingTable[sourceName][targetName];););this.StateChanged.Notify #PropertyTable this.propertyTable;););this.HasProperty property;),public fn CanExecuteCommand commandName = (this.HasCommand commandName and this.isValidCommand this.commandTable[commandName] and this.commandTable[commandName].CanExecute();),public fn ClearBinding binding = (if this.isValidBinding binding do (local sourceName = binding.GetSourceName();local targetName = binding.GetTargetName();if classOf sourceName == Name and classOf targetName == Name do (if hasDictValue this.bindingTable sourceName and hasDictValue this.bindingTable[sourceName] targetName do (removeDictValue this.bindingTable[sourceName] targetName;if this.bindingTable[sourceName].Count == 0 do (removeDictValue this.bindingTable sourceName;);this.targetChanged.Unsubscribe binding.TargetChanged;binding.SetSource undefined;this.StateChanged.Notify #BindingTable this.bindingTable;);););not this.HasBinding binding;),public fn ExecuteCommand commandName = (if this.HasCommand commandName and this.isValidCommand this.commandTable[commandName] do (this.commandTable[commandName].Execute undefined;);ok;),public fn GetBinding sourceName targetName = (local binding = undefined;if this.HasBindingByName sourceName targetName do (binding = this.bindingTable[sourceName][targetName];);binding;),public fn GetBindingSourceNames = (local sourceNames = for key in this.bindingTable.Keys collect key;sort sourceNames;sourceNames;),public fn GetBindingTargetNames sourceName = (local targetNames = #();if classOf sourceName == Name and hasDictValue this.bindingTable sourceName do (targetNames = for key in this.bindingTable[sourceName].Keys collect key;sort targetNames;);targetNames;),public fn GetCommand commandName = (local command = undefined;if this.HasCommand commandName do (command = this.commandTable[commandName];);command;),public fn GetCommandNames = (local commandNames = for key in this.commandTable.Keys collect key;sort commandNames;commandNames;),public fn GetModel modelName = (local model = undefined;if this.HasModel modelName do (model = this.modelTable[modelName];);model;),public fn GetModelNames = (local modelNames = for key in this.modelTable.Keys collect key;sort modelNames;modelNames;),public fn GetProperty propertyName = (local property = undefined;if this.HasProperty propertyName do (property = this.propertyTable[propertyName];);property;),public fn GetPropertyNames = (local propertyNames = for key in this.propertyTable.Keys collect key;sort propertyNames;propertyNames;),public fn GetPropertyValue propertyName = (local propertyValue = undefined;if this.HasProperty propertyName and this.isValidProperty this.propertyTable[propertyName] do (propertyValue = this.propertyTable[propertyName].GetPropertyValue(););propertyValue;),public fn GetViewModelName = (this.viewModelName;),public fn HasBinding binding = (this.isValidBinding binding and this.HasBindingByName (binding.GetSourceName()) (binding.GetTargetName());),public fn HasBindingByName sourceName targetName = (classOf sourceName == Name and classOf targetName == Name and hasDictValue this.bindingTable sourceName and hasDictValue this.bindingTable[sourceName] targetName;),public fn HasCommand key = (local commandName = key;if this.isValidCommand key do (commandName = key.GetCommandName(););classOf commandName == Name and hasDictValue this.commandTable commandName;),public fn HasModel key = (if classOf key == Name then (hasDictValue this.modelTable key;);else (local isFound = false;for modelName in this.modelTable.Keys while not isFound do (isFound = this.modelTable[modelName] == key;);isFound;);),public fn HasProperty key = (local propertyName = key;if this.isValidProperty key do (propertyName = key.GetPropertyName(););classOf propertyName == Name and hasDictValue this.propertyTable propertyName;),public fn Load config = (local isSuccessful = false;if this.isValidConfig config and classOf this.viewModelName == Name do (for propertyName in this.propertyTable.Keys do (local property = this.propertyTable[propertyName];if this.isValidProperty property do (property.Load config this.viewModelName;););isSuccessful = true;);isSuccessful;),public fn RaiseTargetChanged event = (if this.isValidEvent event do (this.targetChanged.Notify #TargetChanged event;);ok;),public fn RefreshBinding = (for sourceName in this.bindingTable.Keys do (for targetName in this.bindingTable[sourceName].Keys do (local binding = this.bindingTable[sourceName][targetName];if this.isValidBinding binding do (binding.Refresh(););););ok;),public fn Save config = (local isSuccessful = false;if this.isValidConfig config and classOf this.viewModelName == Name do (for propertyName in this.propertyTable.Keys do (local property = this.propertyTable[propertyName];if this.isValidProperty property do (property.Save config this.viewModelName;););isSuccessful = true;);isSuccessful;),public fn SetBinding binding = (if this.isValidBinding binding do (local sourceName = binding.GetSourceName();local targetName = binding.GetTargetName();if classOf sourceName == Name and classOf targetName == Name do (if not hasDictValue this.bindingTable sourceName do (this.bindingTable[sourceName] = Dictionary #Name;);if not hasDictValue this.bindingTable[sourceName] targetName do (this.bindingTable[sourceName][targetName] = binding;this.targetChanged.Subscribe binding.TargetChanged;this.setCommandTo binding;this.setPropertyTo binding;this.StateChanged.Notify #BindingTable this.bindingTable;);););this.HasBinding binding;),public fn SetPropertyValue propertyName propertyValue = (local isSuccessful = false;if this.HasProperty propertyName and this.isValidProperty this.propertyTable[propertyName] do (this.propertyTable[propertyName].SetPropertyValue propertyValue;isSuccessful = true;);isSuccessful;),public fn SetViewModelName input = (if classOf input == Name do (this.viewModelName = input;this.StateChanged.Notify #ViewModelName this.viewModelName;);this.GetViewModelName();),private fn isValidBinding obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmBindingStruct;),private fn isValidCommand obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmCommandStruct;),private fn isValidConfig obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #ConfigStruct;),private fn isValidControl obj = (classOf obj == RolloutClass or superClassOf obj == RolloutControl;),private fn isValidEvent obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmEventStruct;),private fn isValidModel obj = (isStruct obj;),private fn isValidModelAttribute obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmModelAttributeStruct;),private fn isValidProperty obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmPropertyStruct;),private fn setCommandTo obj = (local isSuccessful = false;if this.isValidBinding obj do (local commandName = obj.GetSourceName();if classOf commandName == Name and this.HasCommand commandName and this.isValidCommand this.commandTable[commandName] do (obj.SetSource this.commandTable[commandName];isSuccessful = true;););isSuccessful;),private fn setModelTo obj = (local isSuccessful = false;if isStruct obj and isProperty obj #GetModelAttribute and classOf obj.GetModelAttribute == MAXScriptFunction and isProperty obj #SetModel and classOf obj.SetModel == MAXScriptFunction do (local modelAttribute = obj.GetModelAttribute();if this.isValidModelAttribute modelAttribute do (local modelName = modelAttribute.GetModelName();if classOf modelName == Name and this.HasModel modelName and this.isValidModel this.modelTable[modelName] do (obj.SetModel this.modelTable[modelName];isSuccessful = true;);););isSuccessful;),private fn setPropertyTo obj = (local isSuccessful = false;if this.isValidBinding obj do (local propertyName = obj.GetSourceName();if classOf propertyName == Name and this.HasProperty propertyName and this.isValidProperty this.propertyTable[propertyName] do (obj.SetSource this.propertyTable[propertyName];isSuccessful = true;););isSuccessful;),public fn StructName = #MwmViewModelStruct,public fn Dump indent:"" out:listener = (format "%MwmViewModelStruct\n" indent to:out;format "%  bindingTable:%\n" indent this.bindingTable.Count to:out;for sourceName in this.bindingTable.Keys do (format "%    [%]:%\n" indent sourceName this.bindingTable[sourceName].Count to:out;for targetName in this.bindingTable[sourceName].Keys do (local binding = this.bindingTable[sourceName][targetName];if this.isValidBinding binding then (format "%      [%]:\n" indent targetName to:out;binding.Dump indent:(indent + "        ") out:out;);else (format "%      [%]:%\n" indent targetName binding to:out;);););format "%  commandTable:%\n" indent this.commandTable.Count to:out;for commandName in this.commandTable.Keys do (local command = this.commandTable[commandName];if this.isValidCommand command then (format "%    [%]:\n" indent commandName to:out;command.Dump indent:(indent + "      ") out:out;);else (format "%    [%]:%\n" indent commandName command to:out;););format "%  modelTable:%\n" indent this.modelTable.Count to:out;for modelName in this.modelTable.Keys do (local model = this.modelTable[modelName];if this.isValidModel model and isProperty model #StructName and classOf model.StructName == MAXScriptFunction and isProperty model #Dump and classOf model.Dump == MAXScriptFunction then (format "%    [%]:\n" indent modelName to:out;model.Dump indent:(indent + "      ") out:out;);else (format "%    [%]:%\n" indent modelName model to:out;););format "%  propertyTable:%\n" indent this.propertyTable.Count to:out;for propertyName in this.propertyTable.Keys do (local property = this.propertyTable[propertyName];if this.isValidProperty property then (format "%    [%]:\n" indent propertyName to:out;property.Dump indent:(indent + "      ") out:out;);else (format "%    [%]:%\n" indent propertyName property to:out;););format "%  viewModelName:%\n" indent this.viewModelName to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true and isProperty obj #GetBinding and classOf obj.GetBinding == MAXScriptFunction and isProperty obj #GetBindingSourceNames and classOf obj.GetBindingSourceNames == MAXScriptFunction and isProperty obj #GetBindingTargetNames and classOf obj.GetBindingTargetNames == MAXScriptFunction and isProperty obj #GetCommand and classOf obj.GetCommand == MAXScriptFunction and isProperty obj #GetCommandNames and classOf obj.GetCommandNames == MAXScriptFunction and isProperty obj #GetModel and classOf obj.GetModel == MAXScriptFunction and isProperty obj #GetModelNames and classOf obj.GetModelNames == MAXScriptFunction and isProperty obj #GetProperty and classOf obj.GetProperty == MAXScriptFunction and isProperty obj #GetPropertyNames and classOf obj.GetPropertyNames == MAXScriptFunction and isProperty obj #GetViewModelName and classOf obj.GetViewModelName == MAXScriptFunction and obj.GetViewModelName() == this.GetViewModelName();if isEqualProperties do (local oSourceNames = obj.GetBindingSourceNames();local tSourceNames = this.GetBindingSourceNames();isEqualProperties = classOf oSourceNames == Array and classOf tSourceNames == Array and oSourceNames.Count == tSourceNames.Count;for i = 1 to tSourceNames.Count while isEqualProperties do (isEqualProperties = oSourceNames[i] == tSourceNames[i];if isEqualProperties do (local oTargetNames = obj.GetBindingTargetNames oSourceNames[i];local tTargetNames = this.GetBindingTargetNames tSourceNames[i];isEqualProperties = classOf oTargetNames == Array and classOf tTargetNames == Array and oTargetNames.Count == tTargetNames.Count;for j = 1 to tTargetNames.Count while isEqualProperties do (local oBinding = obj.GetBinding oSourceNames[i] oTargetNames[j];local tBinding = this.GetBinding tSourceNames[i] tTargetNames[j];if this.isValidBinding tBinding then (isEqualProperties = tBinding.Equals oBinding;);else (isEqualProperties = oBinding == tBinding;);););););if isEqualProperties do (local oCommandNames = obj.GetCommandNames();local tCommandNames = this.GetCommandNames();isEqualProperties = classOf oCommandNames == Array and classOf tCommandNames == Array and oCommandNames.Count == tCommandNames.Count;for i = 1 to tCommandNames.Count while isEqualProperties do (isEqualProperties = oCommandNames[i] == tCommandNames[i];if isEqualProperties do (local oCommand = obj.GetCommand oCommandNames[i];local tCommand = this.GetCommand tCommandNames[i];if this.isValidCommand tCommand then (isEqualProperties = tCommand.Equals oCommand;);else (isEqualProperties = oCommand == tCommand;););););if isEqualProperties do (local oModelNames = obj.GetModelNames();local tModelNames = this.GetModelNames();isEqualProperties = classOf oModelNames == Array and classOf tModelNames == Array and oModelNames.Count == tModelNames.Count;for i = 1 to tModelNames.Count while isEqualProperties do (isEqualProperties = oModelNames[i] == tModelNames[i];if isEqualProperties do (local oModel = obj.GetModel oModelNames[i];local tModel = this.GetModel tModelNames[i];if this.isValidModel tModel then (isEqualProperties = tModel.Equals oModel;);else (isEqualProperties = oModel == tModel;););););if isEqualProperties do (local oPropertyNames = obj.GetPropertyNames();local tPropertyNames = this.GetPropertyNames();isEqualProperties = classOf oPropertyNames == Array and classOf tPropertyNames == Array and oPropertyNames.Count == tPropertyNames.Count;for i = 1 to tPropertyNames.Count while isEqualProperties do (isEqualProperties = oPropertyNames[i] == tPropertyNames[i];if isEqualProperties do (local oProperty = obj.GetProperty oPropertyNames[i];local tProperty = this.GetProperty tPropertyNames[i];if this.isValidProperty tProperty then (isEqualProperties = tProperty.Equals oProperty;);else (isEqualProperties = oProperty == tProperty;););););isEqualStructName and isEqualProperties;),public StateChanged,private targetChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.targetChanged = ::std.ObservableStruct();this.bindingTable = Dictionary #Name;this.commandTable = Dictionary #Name;this.modelTable = Dictionary #Name;this.propertyTable = Dictionary #Name;this.SetViewModelName this._CP1_;););::mwmDefinitionPool[@"Model\MwmApplication.ms"] = struct MwmApplicationStruct (public _CP1_,public _CP2_,public _CP3_,private applicationFile,private applicationName,private config,private modelTable,private startupViewName,private viewModelTable,private viewTable,private bindingDef,private commandDef,private modelAttributeDef,public fn AddModel modelName obj = (if classOf modelName == Name and this.isValidModel obj do (this.modelTable[modelName] = obj;this.StateChanged.Notify #ModelTable this.modelTable;);this.HasModel obj;),public fn AddView obj = (local viewName = undefined;if this.isValidView obj do (viewName = obj.GetRolloutName(););if classOf viewName == Name do (this.viewTable[viewName] = obj;this.bindRolloutEventToView();this.bindMenuEventToView();this.StateChanged.Notify #ViewTable this.viewTable;);this.HasView obj;),public fn AddViewModel obj = (local viewModelName = undefined;if this.isValidViewModel obj do (viewModelName = obj.GetViewModelName(););if classOf viewModelName == Name do (this.viewModelTable[viewModelName] = obj;this.bindRolloutEventToView();this.bindMenuEventToView();this.StateChanged.Notify #ViewModelTable this.viewModelTable;);this.HasViewModel obj;),public fn GetApplicationFile = (this.applicationFile;),public fn GetApplicationName = (this.applicationName;),public fn GetConfig = (this.config;),public fn GetModel modelName = (local model = undefined;if classOf modelName == Name and hasDictValue this.modelTable modelName do (model = this.modelTable[modelName];);model;),public fn GetStartupViewName = (this.startupViewName;),public fn GetView viewName = (local view = undefined;if classOf viewName == Name and hasDictValue this.viewTable viewName do (view = this.viewTable[viewName];);view;),public fn GetViewModel viewModelName = (local viewModel = undefined;if classOf viewModelName == Name and hasDictValue this.viewModelTable viewModelName do (viewModel = this.viewModelTable[viewModelName];);viewModel;),public fn HasModel key = (if classOf key == Name then (hasDictValue this.modelTable key;);else (local isFound = false;for modelName in this.modelTable.Keys while not isFound do (isFound = this.modelTable[modelName] == key;);isFound;);),public fn HasView key = (local viewName = key;if this.isValidView key do (viewName = key.GetRolloutName(););classOf viewName == Name and hasDictValue this.viewTable viewName;),public fn HasViewModel key = (local viewModelName = key;if this.isValidViewModel key do (viewModelName = key.GetViewModelName(););classOf viewModelName == Name and hasDictValue this.viewModelTable viewModelName;),public fn ReadConfig = (local isSuccessful = false;if this.isValidConfig this.config and this.config.Read() do (for modelName in this.modelTable.Keys do (local model = this.modelTable[modelName];if this.isValidModel model and isProperty model #Load and classOf model.Load == MAXScriptFunction do (model.Load this.config;););for viewModelName in this.viewModelTable.Keys do (local viewModel = this.viewModelTable[viewModelName];if this.isValidViewModel viewModel do (viewModel.Load this.config;););for viewName in this.viewTable.Keys do (local view = this.viewTable[viewName];if this.isValidView view do (view.Load this.config;););this.StateChanged.Notify #ConfigRead undefined;isSuccessful = true;);isSuccessful;),public fn Run = (this.ReadConfig();if classOf this.startupViewName == Name and hasDictValue this.viewTable this.startupViewName do (local view = this.viewTable[this.startupViewName];if this.isValidView view do (local rolloutDef = view.GetRolloutDef();local rolloutViewModel = this.getRolloutViewModel rolloutDef;if this.isValidRolloutDef rolloutDef and this.isValidViewModel rolloutViewModel do (if view.Create() do (rolloutDef.Initialize rolloutViewModel;local menuDef = view.GetMenuDef();local menuViewModel = this.getMenuViewModel menuDef;if this.isValidMenuDef menuDef and this.isValidViewModel menuViewModel do (menuDef.Initialize menuViewModel;);this.StateChanged.Notify #ApplicationRan (view.IsDisplayed());););););ok;),public fn SetApplicationFile input = (if (classOf input == String and ::std.FileUtility.FileExists input) or classOf input == UndefinedClass do (this.applicationFile = input;this.StateChanged.Notify #ApplicationFile this.applicationFile;);this.initializeConfig();this.GetApplicationFile();),public fn SetApplicationName input = (if classOf input == Name do (this.applicationName = input;this.StateChanged.Notify #ApplicationName this.applicationName;);this.GetApplicationName();),public fn SetStartupViewName input = (if classOf input == Name do (this.startupViewName = input;this.StateChanged.Notify #StartupViewName this.startupViewName;);this.GetStartupViewName();),public fn Shutdown = (if classOf this.startupViewName == Name and hasDictValue this.viewTable this.startupViewName do (local view = this.viewTable[this.startupViewName];if this.isValidView view do (if view.IsDisplayed() do (view.Destroy(););this.StateChanged.Notify #ApplicationShutdown (view.IsDisplayed());););ok;),public fn WriteConfig = (local isSuccessful = false;if this.isValidConfig this.config do (for modelName in this.modelTable.Keys do (local model = this.modelTable[modelName];if this.isValidModel model and isProperty model #Save and classOf model.Save == MAXScriptFunction do (model.Save this.config;););for viewModelName in this.viewModelTable.Keys do (local viewModel = this.viewModelTable[viewModelName];if this.isValidViewModel viewModel do (viewModel.Save this.config;););for viewName in this.viewTable.Keys do (local view = this.viewTable[viewName];if this.isValidView view do (view.Save this.config;););isSuccessful = this.config.Write();if isSuccessful do (this.StateChanged.Notify #ConfigWrote undefined;););isSuccessful;),private fn bindMenuEventToView = (for viewName in this.viewTable.Keys do (local view = this.viewTable[viewName];if this.isValidView view do (local viewName = view.GetRolloutName();local menuDef = view.GetMenuDef();local menuViewModel = this.getMenuViewModel menuDef;if classOf viewName == Name and this.isValidMenuDef menuDef and this.isValidViewModel menuViewModel do (local commandAttribute = this.modelAttributeDef viewName;local openCommand = this.commandDef #MenuOpen this.onMenuOpen commandAttribute;local openBinding = this.bindingDef 1 #MenuOpen menuDef #Open;menuViewModel.AddModel viewName view;menuViewModel.AddCommand openCommand;menuViewModel.SetBinding openBinding;);););ok;),private fn bindRolloutEventToView = (for viewName in this.viewTable.Keys do (local view = this.viewTable[viewName];if this.isValidView view do (local viewName = view.GetRolloutName();local rolloutDef = view.GetRolloutDef();local rolloutViewModel = this.getRolloutViewModel rolloutDef;if classOf viewName == Name and this.isValidRolloutDef rolloutDef and this.isValidViewModel rolloutViewModel do (local commandAttribute = this.modelAttributeDef viewName;local closeCommand = this.commandDef #RolloutClose this.onRolloutClose commandAttribute;local movedCommand = this.commandDef #RolloutMoved this.onRolloutMoved commandAttribute;local openCommand = this.commandDef #RolloutOpen this.onRolloutOpen commandAttribute;local resizedCommand = this.commandDef #RolloutResized this.onRolloutResized commandAttribute;local closeBinding = this.bindingDef 1 #RolloutClose rolloutDef #Close;local movedBinding = this.bindingDef 1 #RolloutMoved rolloutDef #Moved;local openBinding = this.bindingDef 1 #RolloutOpen rolloutDef #Open;local resizedBinding = this.bindingDef 1 #RolloutResized rolloutDef #Resized;rolloutViewModel.AddModel viewName view;rolloutViewModel.AddCommand closeCommand;rolloutViewModel.AddCommand movedCommand;rolloutViewModel.AddCommand openCommand;rolloutViewModel.AddCommand resizedCommand;rolloutViewModel.SetBinding closeBinding;rolloutViewModel.SetBinding movedBinding;rolloutViewModel.SetBinding openBinding;rolloutViewModel.SetBinding resizedBinding;);););ok;),private fn getMenuViewModel menuDef = (local viewModel = undefined;if this.isValidMenuDef menuDef do (local dataContext = menuDef.DataContext;if classOf dataContext == Name then (viewModel = this.GetViewModel dataContext;);else (viewModel = dataContext;););viewModel;),private fn getRolloutViewModel rolloutDef = (local viewModel = undefined;if this.isValidRolloutDef rolloutDef do (local dataContext = rolloutDef.DataContext;if classOf dataContext == Name then (viewModel = this.GetViewModel dataContext;);else (viewModel = dataContext;););viewModel;),private fn initializeConfig = (this.config = undefined;if classOf this.applicationFile == String and ::std.FileUtility.FileExists this.applicationFile do (this.config = ::std.ConfigStruct this.applicationFile;);ok;),private fn isValidConfig obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #ConfigStruct;),private fn isValidDialog obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #DialogStruct;),private fn isValidEvent obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmEventStruct;),private fn isValidMenuDef obj = ((classOf obj as String) as Name == #RCMenu and isProperty obj #DataContext and (classOf obj.DataContext == Name or this.isValidViewModel obj.DataContext;) and isProperty obj #Initialize and classOf obj.Initialize == MAXScriptFunction;),private fn isValidModel obj = (isStruct obj;),private fn isValidRolloutDef obj = (classOf obj == RolloutClass and isProperty obj #DataContext and (classOf obj.DataContext == Name or this.isValidViewModel obj.DataContext;) and isProperty obj #Initialize and classOf obj.Initialize == MAXScriptFunction;),private fn isValidView obj = (this.isValidDialog obj and this.isValidRolloutDef (obj.GetRolloutDef());),private fn isValidViewModel obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmViewModelStruct;),private fn onMenuOpen model params event = (for viewModelName in this.viewModelTable.Keys do (local viewModel = this.viewModelTable[viewModelName];if this.isValidViewModel viewModel do (viewModel.RefreshBinding();););ok;),private fn onRolloutClose model params event = (this.WriteConfig();ok;),private fn onRolloutMoved model params event = (if this.isValidDialog model and this.isValidEvent event do (local eventParams = event.GetParams();if classOf eventParams == Array and eventParams.Count == 1 do (model.SetInitPosition eventParams[1];););ok;),private fn onRolloutOpen model params event = (for viewModelName in this.viewModelTable.Keys do (local viewModel = this.viewModelTable[viewModelName];if this.isValidViewModel viewModel do (viewModel.RefreshBinding();););ok;),private fn onRolloutResized model params event = (if this.isValidDialog model and this.isValidEvent event do (local eventParams = event.GetParams();if classOf eventParams == Array and eventParams.Count == 1 do (model.SetInitSize eventParams[1];););ok;),public fn StructName = #MwmApplicationStruct,public fn Dump indent:"" out:listener = (format "%MwmApplicationStruct\n" indent to:out;if classOf this.applicationFile == String then (format "%  applicationFile:@\"%\"\n" indent this.applicationFile to:out;);else (format "%  applicationFile:%\n" indent this.applicationFile to:out;);format "%  applicationName:%\n" indent this.applicationName to:out;if this.isValidConfig this.config then (format "%  config:\n" indent to:out;this.config.Dump indent:(indent + "    ") out:out;);else (format "%  config:%\n" indent this.config to:out;);format "%  modelTable:%\n" indent this.modelTable.Count to:out;for key in this.modelTable.Keys do (local model = this.modelTable[key];if this.isValidModel model and isProperty model #StructName and classOf model.StructName == MAXScriptFunction and isProperty model #Dump and classOf model.Dump == MAXScriptFunction then (format "%    [%]:\n" indent key to:out;model.Dump indent:(indent + "      ") out:out;);else (format "%    [%]:%\n" indent key model to:out;););format "%  startupViewName:%\n" indent this.startupViewName to:out;format "%  viewModelTable:%\n" indent this.viewModelTable.Count to:out;for key in this.viewModelTable.Keys do (local viewModel = this.viewModelTable[key];if this.isValidViewModel viewModel then (format "%    [%]:\n" indent key to:out;viewModel.Dump indent:(indent + "      ") out:out;);else (format "%    [%]:%\n" indent key viewModel to:out;););format "%  viewTable:%\n" indent this.viewTable.Count to:out;for key in this.viewTable.Keys do (local view = this.viewTable[key];if this.isValidView view then (format "%    [%]:\n" indent key to:out;view.Dump indent:(indent + "      ") out:out;);else (format "%    [%]:%\n" indent key view to:out;););ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true and isProperty obj #GetApplicationFile and classOf obj.GetApplicationFile == MAXScriptFunction and obj.GetApplicationFile() == this.GetApplicationFile() and isProperty obj #GetApplicationName and classOf obj.GetApplicationName == MAXScriptFunction and obj.GetApplicationName() == this.GetApplicationName() and isProperty obj #GetStartupViewName and classOf obj.GetStartupViewName == MAXScriptFunction and obj.GetStartupViewName() == this.GetStartupViewName();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.bindingDef = ::mwmDefinitionPool[@"Model\MwmBinding.ms"];this.commandDef = ::mwmDefinitionPool[@"Model\MwmCommand.ms"];this.modelAttributeDef = ::mwmDefinitionPool[@"Model\MwmModelAttribute.ms"];this.modelTable = Dictionary #Name;this.viewModelTable = Dictionary #Name;this.viewTable = Dictionary #Name;this.SetApplicationName this._CP1_;this.SetStartupViewName this._CP2_;this.SetApplicationFile this._CP3_;););global mwm;struct MwmStruct (private converterTable,private applicationDef,private bindingDef,private commandDef,private conditionDef,private converterDef,private eventDef,private modelAttributeDef,private propertyDef,private viewModelDef,public fn AddConverter converterName converter = (if classOf converterName == Name and this.isValidConverter converter do (this.converterTable[converterName] = converter;);this.GetConverter converterName;),public fn CreateApplication applicationName startupViewName applicationFile:undefined = (local application = undefined;if classOf applicationName == Name and classOf startupViewName == Name and (classOf applicationFile == UndefinedClass or classOf applicationFile == String;) do (application = this.applicationDef applicationName startupViewName applicationFile;);application;),public fn CreateCommand commandName executeFunction:undefined modelAttribute:undefined executeCondition:undefined canExecuteCondition:undefined = (local command = undefined;if classOf commandName == Name do (command = this.commandDef commandName executeFunction modelAttribute executeCondition canExecuteCondition;);command;),public fn CreateCommandBinding commandName target targetEventName = (local binding = undefined;if classOf commandName == Name and this.isValidControl target and classOf targetEventName == Name do (binding = this.bindingDef 1 commandName target targetEventName;);binding;),public fn CreateCondition evaluator:undefined = (this.conditionDef evaluator;),public fn CreateConverter toTargetFunction toSourceFunction = (local converter = undefined;if classOf toTargetFunction == MAXScriptFunction and classOf toSourceFunction == MAXScriptFunction do (converter = this.converterDef toTargetFunction toSourceFunction;);converter;),public fn CreateEvent control eventName params = (local event = undefined;if this.isValidControl control and classOf eventName == Name do (event = this.eventDef control eventName params;);event;),public fn CreateModelAttribute modelName propertyName:undefined getterName:undefined setterName:undefined = (local modelAttribute = undefined;if classOf modelName == Name do (modelAttribute = this.modelAttributeDef modelName propertyName getterName setterName;);modelAttribute;),public fn CreateProperty propertyName propertyValue modelAttribute:undefined enabledCondition:undefined = (local property = undefined;if classOf propertyName == Name do (property = this.propertyDef propertyName propertyValue modelAttribute enabledCondition;);property;),public fn CreatePropertyBinding mode propertyName target targetEventName targetPropertyName = (local binding = undefined;if classOf mode == Integer and classOf propertyName == Name and this.isValidControl target and classOf targetEventName == Name and classOf targetPropertyName == Name do (binding = this.bindingDef mode propertyName target targetEventName targetPropertyName;);binding;),public fn CreateViewModel viewModelName = (local viewModel = undefined;if classOf viewModelName == Name do (viewModel = this.viewModelDef viewModelName;);viewModel;),public fn GetConverter converterName = (local converter = undefined;if classOf converterName == Name and hasDictValue this.converterTable converterName do (converter = this.converterTable[converterName];);converter;),public fn GetConverterNames = (local converterNames = for key in this.converterTable.Keys collect key;sort converterNames;converterNames;),public fn Install = (::MwmStruct();::mwm.AddConverter #IntegerToString (::mwm.CreateConverter (fn toTarget input = input as String) (fn toSource input = input as Integer););if isProperty ::startupLoader #RegisterFile do (::startupLoader.RegisterFile (getSourceFileName()););format "[install]::mwm\n";ok;),public fn IsValidViewModel obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmViewModelStruct;),public fn Uninstall = (if isProperty ::startupLoader #UnregisterFile do (::startupLoader.UnregisterFile (getSourceFileName()););::mwm = undefined;format "[uninstall]::mwm\n";),private fn isValidControl obj = (this.isValidRollout obj or this.isValidRolloutControl obj or this.isValidRCMenu obj or this.isValidMenuItem obj;),private fn isValidConverter obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmConverterStruct;),private fn isValidMenuItem obj = (classOf obj == Value and matchPattern (obj as String) pattern:"MenuItem:*" ignoreCase:true;),private fn isValidModelAttribute obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #MwmModelAttributeStruct;),private fn isValidRCMenu obj = ((classOf obj as String) as Name == #RCMenu and matchPattern (obj as String) pattern:"RCMenu:*" ignoreCase:true;),private fn isValidRollout obj = (classOf obj == RolloutClass;),private fn isValidRolloutControl obj = (superClassOf obj == RolloutControl;),private version = "2.7.0",public fn StructName = #MwmStruct,public fn Dump indent:"" out:listener = (format "%MwmStruct\n" indent to:out;format "%  converterTable:%\n" indent this.converterTable.Count to:out;for converterName in this.converterTable.Keys do (format "%    [%]:\n" indent converterName to:out;this.converterTable[converterName].Dump indent:(indent + "      ") out:out;);format "%  applicationDef:%\n" indent this.applicationDef to:out;format "%  bindingDef:%\n" indent this.bindingDef to:out;format "%  commandDef:%\n" indent this.commandDef to:out;format "%  conditionDef:%\n" indent this.conditionDef to:out;format "%  converterDef:%\n" indent this.converterDef to:out;format "%  eventDef:%\n" indent this.eventDef to:out;format "%  modelAttributeDef:%\n" indent this.modelAttributeDef to:out;format "%  propertyDef:%\n" indent this.propertyDef to:out;format "%  viewModelDef:%\n" indent this.viewModelDef to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true;isEqualStructName and isEqualProperties;),public fn GetVersion = (this.version;),on Create do (::mwm = this;this.converterTable = Dictionary #Name;this.applicationDef = ::mwmDefinitionPool[@"Model\MwmApplication.ms"];this.bindingDef = ::mwmDefinitionPool[@"Model\MwmBinding.ms"];this.commandDef = ::mwmDefinitionPool[@"Model\MwmCommand.ms"];this.conditionDef = ::mwmDefinitionPool[@"Model\MwmCondition.ms"];this.converterDef = ::mwmDefinitionPool[@"Model\MwmConverter.ms"];this.eventDef = ::mwmDefinitionPool[@"Model\MwmEvent.ms"];this.modelAttributeDef = ::mwmDefinitionPool[@"Model\MwmModelAttribute.ms"];this.propertyDef = ::mwmDefinitionPool[@"Model\MwmProperty.ms"];this.viewModelDef = ::mwmDefinitionPool[@"Model\MwmViewModel.ms"];););::MwmStruct.Install();::MwmStruct;